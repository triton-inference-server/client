# Copyright 2020-2024, NVIDIA CORPORATION & AFFILIATES. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#  * Neither the name of NVIDIA CORPORATION nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# FIXME: Windows client currently does not support GPU tensors.
# For simplicity, we will override this option here.
if(WIN32 AND TRITON_ENABLE_GPU)
  message(FATAL_ERROR  "GPU shared memory is not currently supported by the Windows python client.")
  set(TRITON_ENABLE_GPU OFF CACHE BOOL "GPU disabled" FORCE)
endif()

configure_file(__init__.py __init__.py COPYONLY)
configure_file(_dlpack.py _dlpack.py COPYONLY)
configure_file(_shared_memory_tensor.py _shared_memory_tensor.py COPYONLY)

file(COPY shared_memory DESTINATION .)
#
# libcshm.so / cshm.dll
#
add_library(cshm SHARED shared_memory/shared_memory.cc)
if(${TRITON_ENABLE_GPU})
  target_compile_definitions(cshm PUBLIC TRITON_ENABLE_GPU=1)
  target_link_libraries(cshm PUBLIC CUDA::cudart)
endif() # TRITON_ENABLE_GPU

if(NOT WIN32)
  target_link_libraries(cshm PRIVATE rt)
endif() # NOT WIN32

configure_file(shared_memory/__init__.py shared_memory/__init__.py COPYONLY)

if(${TRITON_ENABLE_GPU})
  configure_file(cuda_shared_memory/__init__.py cuda_shared_memory/__init__.py COPYONLY)
  configure_file(cuda_shared_memory/_utils.py cuda_shared_memory/_utils.py COPYONLY)
endif() # TRITON_ENABLE_GPU
